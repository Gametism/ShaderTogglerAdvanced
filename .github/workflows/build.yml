name: Build ShaderToggler (scan Release, x86 & x64)

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        platform: [x64, Win32]

    steps:
      - uses: actions/checkout@v4
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Locate project
        id: findproj
        shell: pwsh
        run: |
          $cands = Get-ChildItem -Recurse -Filter *.vcxproj | Select-Object -Expand FullName
          if (-not $cands) { Write-Error "No .vcxproj found"; exit 1 }
          $proj = $cands | Where-Object { $_ -like "*ShaderToggler.vcxproj" } | Select-Object -First 1
          if (-not $proj) { $proj = $cands | Select-Object -First 1 }
          echo "PROJ=$proj" >> $env:GITHUB_OUTPUT
          Write-Host "Using project: $proj"

      - name: Build ${{ matrix.platform }} Release
        run: >
          msbuild "${{ steps.findproj.outputs.PROJ }}"
          /p:Configuration=Release
          /p:Platform=${{ matrix.platform }}
          /m

      # ðŸ”Ž Log what Release folders/files exist after the build
      - name: List Release tree (diagnostic)
        shell: pwsh
        run: |
          $root = Split-Path "${{ steps.findproj.outputs.PROJ }}"
          Write-Host "Project root: $root"
          $rels = Get-ChildItem -Path $root -Recurse -Directory -Filter Release
          if (-not $rels) { Write-Host "No Release directories found."; exit 0 }
          foreach ($d in $rels) {
            Write-Host "=== $($d.FullName) ==="
            Get-ChildItem -Path $d.FullName -Force
          }

      # ðŸ§¹ Robust packaging: find ANY dll in Release (prefer ones with 'ShaderToggler' in the name), per-platform
      - name: Package .addon (scan Release dirs)
        shell: pwsh
        run: |
          $plat = "${{ matrix.platform }}"
          $root = Split-Path "${{ steps.findproj.outputs.PROJ }}"

          # Find Release dirs that look like correct platform
          $releaseDirs = Get-ChildItem -Path $root -Recurse -Directory -Filter Release
          if ($plat -eq 'x64') {
            $releaseDirs = $releaseDirs | Where-Object { $_.FullName -match '\\x64\\' -or $_.FullName -match 'ShaderToggler\\x64\\Release' }
          } else {
            # Win32 might be 'Win32\\Release' or just 'Release' without 'x64'
            $releaseDirs = $releaseDirs | Where-Object { $_.FullName -match '\\Win32\\' -or $_.FullName -notmatch '\\x64\\' }
          }

          if (-not $releaseDirs) {
            Write-Error "No Release folder matched platform '$plat'."
            exit 1
          }

          # Gather DLLs under those Release dirs
          $dlls = foreach ($d in $releaseDirs) { Get-ChildItem -Path $d.FullName -File -Filter *.dll -ErrorAction SilentlyContinue }
          # Prefer ones that contain "ShaderToggler" in the name
          $preferred = $dlls | Where-Object { $_.Name -match 'ShaderToggler' } | Sort-Object LastWriteTime -Descending
          if (-not $preferred) { $preferred = $dlls | Sort-Object LastWriteTime -Descending }

          if (-not $preferred) {
            # Maybe the build already created an .addon
            $addons = foreach ($d in $releaseDirs) { Get-ChildItem -Path $d.FullName -File -Filter *.addon -ErrorAction SilentlyContinue }
            if ($addons) {
              Write-Host "Found existing .addon(s):"
              $addons | ForEach-Object { Write-Host $_.FullName }
              exit 0
            }
            Write-Error "No ShaderToggler.dll or .addon found after build."
            exit 1
          }

          # Copy the newest DLL to .addon next to itself
          $dll = $preferred | Select-Object -First 1
          $addonPath = Join-Path $dll.DirectoryName "ShaderToggler.addon"
          Copy-Item $dll.FullName $addonPath -Force
          Write-Host "Packaged: $addonPath"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ShaderToggler-${{ matrix.platform }}-Release
          path: |
            **/Release/*.dll
            **/Release/*.addon
