name: Build ShaderToggler (fixed paths, x86 & x64)

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    strategy:
      matrix:
        platform: [x64, Win32]

    steps:
      - uses: actions/checkout@v4
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Locate project
        id: findproj
        shell: pwsh
        run: |
          $cands = Get-ChildItem -Recurse -Filter *.vcxproj | Select-Object -Expand FullName
          if (-not $cands) { Write-Error "No .vcxproj found"; exit 1 }
          $proj = $cands | Where-Object { $_ -like "*ShaderToggler.vcxproj" } | Select-Object -First 1
          if (-not $proj) { $proj = $cands | Select-Object -First 1 }
          echo "PROJ=$proj" >> $env:GITHUB_OUTPUT
          Write-Host "Using project: $proj"

      - name: Build ${{ matrix.platform }} Release
        run: >
          msbuild "${{ steps.findproj.outputs.PROJ }}"
          /p:Configuration=Release
          /p:Platform=${{ matrix.platform }}

      - name: Package .addon (robust scan)
        shell: pwsh
        run: |
          $plat = "${{ matrix.platform }}"
          $root = Split-Path "${{ steps.findproj.outputs.PROJ }}"

          # 1) Find DLLs
          $dlls = Get-ChildItem -Path $root -Recurse -File -Filter ShaderToggler.dll

          # 2) Filter by platform:
          if ($plat -eq 'x64') {
            $dlls = $dlls | Where-Object { $_.FullName -match '\\x64\\' -or $_.DirectoryName -match '\\x64\\' }
            # Fallback: if nothing under \x64\, allow anything under \Release\ but not \Win32\
            if (-not $dlls) { $dlls = Get-ChildItem -Path $root -Recurse -File -Filter ShaderToggler.dll | Where-Object { $_.FullName -match '\\Release\\' -and $_.FullName -notmatch '\\Win32\\' } }
          } else {
            # Win32: prefer explicit \Win32\ paths
            $dlls = $dlls | Where-Object { $_.FullName -match '\\Win32\\' }
            # Fallback: many VS projects put Win32 straight under \Release\ with no \Win32\ segment
            if (-not $dlls) { $dlls = Get-ChildItem -Path $root -Recurse -File -Filter ShaderToggler.dll | Where-Object { $_.FullName -match '\\Release\\' -and $_.FullName -notmatch '\\x64\\' } }
          }

          # 3) If no DLLs, try existing .addon files directly
          if (-not $dlls) {
            $addons = Get-ChildItem -Path $root -Recurse -File -Filter ShaderToggler.addon
            if ($plat -eq 'x64') {
              $addons = $addons | Where-Object { $_.FullName -match '\\x64\\' -or ($_.FullName -match '\\Release\\' -and $_.FullName -notmatch '\\Win32\\') }
            } else {
              $addons = $addons | Where-Object { $_.FullName -match '\\Win32\\' -or ($_.FullName -match '\\Release\\' -and $_.FullName -notmatch '\\x64\\') }
            }
            if ($addons) {
              Write-Host "Found existing .addon(s):"
              $addons | ForEach-Object { Write-Host $_.FullName }
              exit 0
            }
            Write-Error "No ShaderToggler.dll or .addon found after build."
            exit 1
          }

          # 4) Copy DLL -> .addon next to it
          foreach ($dll in $dlls) {
            $dir = Split-Path $dll.FullName
            $addon = Join-Path $dir "ShaderToggler.addon"
            Copy-Item $dll.FullName $addon -Force
            Write-Host "Packaged: $addon"
          }
          Write-Host "Packaging complete."

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ShaderToggler-${{ matrix.platform }}-Release
          path: |
            **/Release/ShaderToggler.dll
            **/Release/ShaderToggler.addon
